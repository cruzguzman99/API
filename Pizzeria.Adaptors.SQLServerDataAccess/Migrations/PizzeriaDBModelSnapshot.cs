// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pizzeria.Adaptors.SQLServerDataAccess.Contexts;

namespace Pizzeria.Adaptors.SQLServerDataAccess.Migrations
{
    [DbContext(typeof(PizzeriaDB))]
    partial class PizzeriaDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Administrador", b =>
                {
                    b.Property<Guid>("AdministradoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("telefono")
                        .HasColumnType("int");

                    b.Property<int>("tipo")
                        .HasColumnType("int");

                    b.HasKey("AdministradoID");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Categoria", b =>
                {
                    b.Property<Guid>("CategoriaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaID");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("ClienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("telefono")
                        .HasColumnType("int");

                    b.Property<int>("tipo")
                        .HasColumnType("int");

                    b.HasKey("ClienteID");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.CrearProducto", b =>
                {
                    b.Property<Guid>("CrearProductoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CantidadIngrediente")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoDeIngredientes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("IngredienteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CrearProductoID");

                    b.HasIndex("IngredienteID");

                    b.HasIndex("ProductoID");

                    b.ToTable("CrearProducto");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Empleado", b =>
                {
                    b.Property<Guid>("EmpleadoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("telefono")
                        .HasColumnType("int");

                    b.Property<int>("tipo")
                        .HasColumnType("int");

                    b.HasKey("EmpleadoID");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Factura", b =>
                {
                    b.Property<Guid>("FacturaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpleadoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FacturaID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("EmpleadoID");

                    b.ToTable("Factura");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.FacturaDetalle", b =>
                {
                    b.Property<Guid>("ProductoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacturaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CatidadProductosVendido")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoProductosVendido")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioProductosVendido")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductoID", "FacturaID")
                        .IsClustered(false);

                    b.HasIndex("FacturaID");

                    b.ToTable("FacturaDetalle");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Ingrediente", b =>
                {
                    b.Property<Guid>("IngredienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("unidadMedida")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredienteID");

                    b.ToTable("Ingrediente");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Producto", b =>
                {
                    b.Property<Guid>("ProductoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tamaño")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isCompound")
                        .HasColumnType("bit");

                    b.HasKey("ProductoID");

                    b.HasIndex("CategoriaID");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Root", b =>
                {
                    b.Property<Guid>("RootID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("telefono")
                        .HasColumnType("int");

                    b.Property<int>("tipo")
                        .HasColumnType("int");

                    b.HasKey("RootID");

                    b.ToTable("Root");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.CrearProducto", b =>
                {
                    b.HasOne("Pizzeria.Core.Domain.Models.Ingrediente", "ingredienteNav")
                        .WithMany("crearProductosNav")
                        .HasForeignKey("IngredienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pizzeria.Core.Domain.Models.Producto", "productoNav")
                        .WithMany("crearProductosNav")
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ingredienteNav");

                    b.Navigation("productoNav");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Factura", b =>
                {
                    b.HasOne("Pizzeria.Core.Domain.Models.Cliente", "clienteNav")
                        .WithMany("facturasNav")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pizzeria.Core.Domain.Models.Empleado", "empleadoNav")
                        .WithMany("facturasNav")
                        .HasForeignKey("EmpleadoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("clienteNav");

                    b.Navigation("empleadoNav");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.FacturaDetalle", b =>
                {
                    b.HasOne("Pizzeria.Core.Domain.Models.Factura", "facturaNav")
                        .WithMany("facturaDetallesNav")
                        .HasForeignKey("FacturaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pizzeria.Core.Domain.Models.Producto", "productoNav")
                        .WithMany("facturaDetalleNav")
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facturaNav");

                    b.Navigation("productoNav");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Producto", b =>
                {
                    b.HasOne("Pizzeria.Core.Domain.Models.Categoria", "categoriaNav")
                        .WithMany("productosNav")
                        .HasForeignKey("CategoriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoriaNav");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Categoria", b =>
                {
                    b.Navigation("productosNav");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Cliente", b =>
                {
                    b.Navigation("facturasNav");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Empleado", b =>
                {
                    b.Navigation("facturasNav");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Factura", b =>
                {
                    b.Navigation("facturaDetallesNav");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Ingrediente", b =>
                {
                    b.Navigation("crearProductosNav");
                });

            modelBuilder.Entity("Pizzeria.Core.Domain.Models.Producto", b =>
                {
                    b.Navigation("crearProductosNav");

                    b.Navigation("facturaDetalleNav");
                });
#pragma warning restore 612, 618
        }
    }
}
